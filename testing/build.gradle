import com.enonic.uitest.server.ServerInstance

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-gulp-plugin:0.13'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.moowork.node' version '0.13'
    id 'com.moowork.gulp' version '0.13'
    id 'com.github.psxpaul.execfork' version '0.1.8'
}
    group = 'com.enonic.xp.js_testing'
    version = '1.0'

subprojects {
    name = 'app-contentstudio-projects'
}
configurations {
    distro
}

apply plugin: 'com.enonic.defaults'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.gulp'

ext.extProgram = new Properties()
extProgram.load( new FileInputStream( "../gradle.properties" ) )
extProgram['xpVersion']

enonic {
    publishRepo = 'inhouse'
}

ext {
    xpVersion = extProgram['xpVersion']
    appVersion = extProgram['version']
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}reports"
    distroDir = "$unpackDir${File.separator}enonic-xp-generic-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    appDir = "$projectDir${File.separator}test-applications"
    seleniumDir = "$projectDir${File.separator}test-applications${File.separator}selenium"
    mochaResultsDir = "mochawesome-report"
    xpHome = "$distroDir${File.separator}home"
    configDir = "$xpHome${File.separator}config"
    xpServer = new ServerInstance()
    contentStudioFile = "$deployDir${File.separator}contentstudio-${appVersion}.jar"
    contentStudioAppUrl = "https://repo.enonic.com/dev/com/enonic/app/contentstudio/${appVersion}/contentstudio-${appVersion}.jar"
}

task ensureScreenshotsDirectory {
    doLast {
        mkdir screenshotsDir
    }
}
task copyConfig( type: Copy ) {
    println "$appDir${File.separator}common-config"
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
}

task copyApps( type: Copy ) {
    println '*********************************************************'
    println '* task started:copyApps  *'
    println '*********************************************************'
    println appDir
    println deployDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
}

dependencies {
    compile "com.enonic.xp:core-api:$xpVersion"
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task deployContentStudio( type: DefaultTask ) {
    outputs.files( contentStudioFile )
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL( contentStudioAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
}

task zipScreenshots( type: Zip ) {
    from screenshotsDir
    include '*'
    include '*/*'
    classifier 'screenshots'
}

task zipReport( type: Zip ) {
    from mochaResultsDir
    include '*'
    include '*/*'
    classifier 'mochaReport'
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifact zipScreenshots
            artifact zipReport
        }
    }
}

jar.enabled = true

task startServer( dependsOn: [unpackDistro, copyConfig, deployContentStudio] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 60000
        xpServer.start()
    }
    copyConfig.mustRunAfter unpackDistro
    deployContentStudio.mustRunAfter unpackDistro
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}

task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}

task buildApplications( dependsOn: ['test-applications:simple-page:install'] )

//run task in the task.js. Name of the task is 'test'
task testContentStudioApp( type: NpmTask,
                           dependsOn: [npmInstall, startServer, copyApps, ensureScreenshotsDirectory] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
    startServer.mustRunAfter npmInstall
    copyApps.mustRunAfter startServer
}

task testContentStudioProjects( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps, ensureScreenshotsDirectory] ) {
    args = ['run-script', 'test_project']
    startServer.mustRunAfter npmInstall
    copyApps.mustRunAfter startServer
}

task runSeparateTestLocally( type: Exec, dependsOn: [npmInstall, ensureScreenshotsDirectory] ) {
    if ( project.hasProperty( "t_name" ) )
    {
        println( "N_A_M_E: " + t_name );
        environment = ['t_name': t_name]
        commandLine 'node', './tasks/test-by-name.js'
    }
}

task testContentStudioAppLocally( type: NpmTask, dependsOn: [npmInstall, ensureScreenshotsDirectory] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
}

testContentStudioApp.finalizedBy = ['stopServer']

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.enonic.com/dev'
    }
}
