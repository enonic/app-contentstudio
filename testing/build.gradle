import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
    apps {
        transitive false
    }
}

def unpackDir = layout.buildDirectory.dir("install").get()
def distroDir = unpackDir.dir("enonic-xp-generic-$xpVersion")
def deployDir = distroDir.dir("home/deploy")
def testConfDir = "$projectDir/test-config"
def xpHome = "$distroDir/home"
def configDir = "$xpHome/config"
def contentStudioFile = "$deployDir/contentstudio-${version}.jar"
def contentStudioAppUrl = project.hasProperty('contentStudioAppUrl') ? contentStudioAppUrl : "file:///$projectDir/../modules/app/build/libs/contentstudio.jar"

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@tgz"
    apps "com.enonic.uitest:adfs-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:auth0-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:contenttypes:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:myfirstapp:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:simple-page:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:test-application:1.0.0-SNAPSHOT"
}

tasks.register( 'unpackDistro', Copy ) {
    from {
        configurations.distro.collect { tarTree( it ) }
    }
    into unpackDir
}

tasks.register( 'copyConfig', Copy ) {
    println "$testConfDir${File.separator}common-config"
    from "$testConfDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

tasks.register( 'copyCustomConfig', Copy ) {
    println "$testConfDir${File.separator}custom-config"
    from "$testConfDir${File.separator}custom-config"
    include '**.*.cfg'
    into file( configDir )
}

tasks.register( 'copyProjectMultiConfig', Copy ) {
    println "$testConfDir${File.separator}project-multi-config"
    from "$testConfDir${File.separator}project-multi-config"
    include '**.*.cfg'
    into file( configDir )
}

tasks.register( 'downloadApps', Copy ) {
    from {
        configurations.apps
    }
    into deployDir
    mustRunAfter unpackDistro

    doLast {
        println 'Task downloadApps completed successfully.'
        println 'Downloaded artifacts:'
        configurations.apps.files.each { file ->
            println "- ${file.name}"
        }
    }
}

tasks.register( 'deployContentStudio', DefaultTask ) {
    outputs.files( contentStudioFile )
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL(contentStudioAppUrl as String).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
    mustRunAfter unpackDistro
}

def process
tasks.register( 'startServer' ) {
    dependsOn( unpackDistro )
    doLast {
        def pb
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            pb = new ProcessBuilder('cmd', '/c', "${distroDir}\\bin\\server.bat")
        }
        else {
            pb = new ProcessBuilder("${distroDir}/bin/server.sh")
        }
        Map<String, String> env = pb.environment()
        env.put("XP_HOME", "${xpHome}".toString())

        def logsPath = layout.buildDirectory.dir("reports/logs").get()
        mkdir logsPath.asFile
        pb.redirectOutput(logsPath.file("xp.log").asFile)
        pb.redirectErrorStream(true)
        process = pb.start()
        sleep(70000)
    }
}


tasks.register( 'stopServer' ) {
    doLast {
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            Runtime.getRuntime().exec("taskkill /F /T /PID " + process.pid());
        } else {
            process.destroy()
        }
    }
}

tasks.register( 'cleanup', Delete) {
    delete './build/reports/allure'
}

tasks.register( 'generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

tasks.named('downloadApps') {
    mustRunAfter tasks.named('npmInstall')
}
tasks.named('deployContentStudio') {
    mustRunAfter tasks.named('npmInstall')
}
tasks.named('copyConfig') {
    mustRunAfter tasks.named('deployContentStudio')
}
tasks.named('startServer') {
    mustRunAfter tasks.named('copyConfig')
}

tasks.named('copyProjectMultiConfig') {
    mustRunAfter tasks.named('copyConfig')
}

tasks.named('copyCustomConfig') {
    mustRunAfter tasks.named('copyConfig')
}

///////////////// CHROME WDIO , download test Apps,  startServer,
tasks.register( 'w_testInputTypes', NpmTask ) {
    dependsOn ( npmInstall, downloadApps, copyConfig, startServer )
    args = ['run-script', 'test_input_types:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testInputTypesLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types:wdio_chrome']
}

tasks.register( 'w_testInputTypes_2', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )
    args = ['run-script', 'test_input_types_2:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testInputTypes_2_Local', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types_2:wdio_chrome']
}

tasks.register( 'w_testModalDialog', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )

    args = ['run-script', 'test_modal_dialog:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testModalDialogLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
}

tasks.register( 'w_testWizardsGrid', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )

    args = ['run-script', 'test_wizards_grid:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testWizardsGridLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
}

tasks.register( 'w_testPublishIssues', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )

    args = ['run-script', 'test_publish_issues:wdio_chrome']
    finalizedBy generateReportAndStopServer
}
tasks.register( 'w_testPublishIssuesLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_publish_issues:wdio_chrome']
}

tasks.register( 'w_testProjects', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig,  startServer )

    args = ['run-script', 'test_project:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_miscTests', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio,  downloadApps, copyConfig, startServer )
    args = ['run-script', 'test_misc:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testProjects_2', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )

    args = ['run-script', 'test_project_2:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testProjects_multi', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, copyProjectMultiConfig, startServer )

    args = ['run-script', 'test_project_multi:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testProjectsLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_project:wdio_chrome']
}

tasks.register( 'w_testPageEditor', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, startServer )

    args = ['run-script', 'test_page_editor:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testPageEditorLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_page_editor:wdio_chrome']
}

tasks.register( 'w_testExcludeDependencies', NpmTask ) {
    dependsOn ( npmInstall, deployContentStudio, downloadApps, copyConfig, copyCustomConfig, startServer )
    args = ['run-script', 'test_exclude_dependencies:wdio_chrome']
    finalizedBy generateReportAndStopServer
}
