import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
}

def unpackDir = layout.buildDirectory.dir("install").get()
def distroDir = unpackDir.dir("enonic-xp-generic-$xpVersion")
def deployDir = distroDir.dir("home/deploy")
def appDir = "$projectDir/test-applications"
def xpHome = "$distroDir/home"
def configDir = "$xpHome/config"
def contentStudioFile = "$deployDir/contentstudio-${version}.jar"
def contentStudioAppUrl = project.hasProperty('contentStudioAppUrl') ? contentStudioAppUrl : "file:///$projectDir/../modules/app/build/libs/contentstudio.jar"

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

tasks.register( 'unpackDistro', Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into unpackDir
}
tasks.register( 'copyConfig', Copy ) {
    println "$appDir${File.separator}common-config"
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

tasks.register( 'copyCustomConfig', Copy ) {
    println "$appDir${File.separator}custom-config"
    from "$appDir${File.separator}custom-config"
    include '**.*.cfg'
    into file( configDir )
}

tasks.register( 'copyProjectMultiConfig', Copy ) {
    println "$appDir${File.separator}project-multi-config"
    from "$appDir${File.separator}project-multi-config"
    include '**.*.cfg'
    into file( configDir )
}

tasks.register( 'copyApps', Copy ) {
    println '*********************************************************'
    println '* task started:copyApps  *'
    println '*********************************************************'
    println appDir
    println deployDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}

tasks.register( 'deployContentStudio', DefaultTask ) {
    outputs.files( contentStudioFile )
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL(contentStudioAppUrl as String).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
    mustRunAfter unpackDistro
}

def process
tasks.register( 'startServer' ) {
    dependsOn( unpackDistro, copyConfig, deployContentStudio )
    doLast {
        def pb
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            pb = new ProcessBuilder('cmd', '/c', "${distroDir}\\bin\\server.bat")
        }
        else {
            pb = new ProcessBuilder("${distroDir}/bin/server.sh")
        }
        Map<String, String> env = pb.environment()
        env.put("XP_HOME", "${xpHome}".toString())

        def logsPath = layout.buildDirectory.dir("reports/logs").get()
        mkdir logsPath.asFile
        pb.redirectOutput(logsPath.file("xp.log").asFile)
        pb.redirectErrorStream(true)
        process = pb.start()
        sleep(90000)
    }
}


tasks.register( 'stopServer' ) {
    doLast {
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            Runtime.getRuntime().exec("taskkill /F /T /PID " + process.pid());
        } else {
            process.destroy()
        }
    }
}

tasks.register( 'cleanup', Delete) {
    delete './build/reports/allure'
}

tasks.register( 'generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

/////////////////////////////Firefox geckodriver:
tasks.register( 'testWizardsGridFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_wizards_grid:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testPageEditorFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_page_editor:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testWizardsGridFirefoxLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_wizards_grid:firefox']
}

tasks.register( 'testPageEditorFirefoxLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_page_editor:firefox']
}

tasks.register( 'testInputTypesFirefox_2', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_input_types_2:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testInputTypesFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_input_types:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testInputTypesFirefox_2_Local', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types_2:firefox']
}

tasks.register( 'testInputTypesFirefoxLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types:firefox']
}

tasks.register( 'testContentStudioProjectsFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_project:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testPublishIssuesFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_publish_issues:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testModalDialogFirefox', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_modal_dialog:firefox']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testPublishIssuesFirefoxLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_publish_issues:firefox']
}

tasks.register( 'testModalDialogFirefoxLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_modal_dialog:firefox']
}

///////////////// CHROME WDIO , startServer, copyApps
tasks.register( 'w_testInputTypes', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_input_types:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testInputTypesLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types:wdio_chrome']
}

tasks.register( 'w_testInputTypes_2', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_input_types_2:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testInputTypes_2_Local', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_input_types_2:wdio_chrome']
}

tasks.register( 'w_testModalDialog', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testModalDialogLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
}

tasks.register( 'w_testWizardsGrid', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testWizardsGridLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
}

tasks.register( 'w_testPublishIssues', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_publish_issues:wdio_chrome']
    finalizedBy generateReportAndStopServer
}
tasks.register( 'w_testPublishIssuesLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_publish_issues:wdio_chrome']
}

tasks.register( 'w_testProjects', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_project:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_miscTests', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_misc:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testProjects_2', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_project_2:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'testProjects_multi', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps, copyProjectMultiConfig )
    args = ['run-script', 'test_project_multi:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testProjectsLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_project:wdio_chrome']
}

tasks.register( 'w_testPageEditor', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_page_editor:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testPageEditorLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_page_editor:wdio_chrome']
}

tasks.register( 'w_testHiddenDefProject', NpmTask ) {
    dependsOn ( npmInstall, startServer, copyApps, copyCustomConfig )
    args = ['run-script', 'test_hide_default_project:wdio_chrome']
    finalizedBy generateReportAndStopServer
}
