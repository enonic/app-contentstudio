import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

group = 'com.enonic.app.contentstudio.js_testing'

base {
    archivesName = 'contentstudio-testing'
}

configurations {
    distro
    apps {
        transitive = false
    }
}

def unpackDir = layout.buildDirectory.dir( 'install' ).get()
def distroDir = unpackDir.dir("enonic-xp-generic-$xpVersion")
def xpHome = distroDir.dir('home')

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@tgz"
    apps "com.enonic.uitest:adfs-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:auth0-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:contenttypes:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:myfirstapp:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:simple-page:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:test-application:1.0.0-SNAPSHOT"
}

// Setup tasks
tasks.register( 'unpackDistro', Copy ) {
    description = 'Unpacks the XP distribution for testing'
    group = 'Test Setup'

    from {
        configurations.distro.collect { tarTree( it ) }
    }
    into unpackDir
}

tasks.register( 'copyConfig', Copy ) {
    description = 'Copy common configuration files'
    group = 'Test Setup'

    from layout.projectDirectory.dir('test-config/common-config')
    include '**.*.cfg'
    include '*.properties'
    into xpHome.dir('config')
    mustRunAfter tasks.named( 'unpackDistro' )
}

tasks.register('copyCustomConfig', Copy) {
    description = 'Copy custom configuration files'
    group = 'Test Setup'

    from layout.projectDirectory.dir('test-config/custom-config')
    include '**.*.cfg'
    include '*.properties'
    into xpHome.dir('config')
    dependsOn tasks.named( 'copyConfig' )
}

tasks.register('copyProjectMultiConfig', Copy) {
    description = 'Copy project multi configuration files'
    group = 'Test Setup'

    from layout.projectDirectory.dir('test-config/project-multi-config')
    include '**.*.cfg'
    include '*.properties'
    into xpHome.dir('config')
    dependsOn tasks.named( 'copyConfig' )
}

tasks.register( 'downloadApps', Copy ) {
    description = 'Download test applications'
    group = 'Test Setup'

    from {
        configurations.apps
    }
    into xpHome.dir( 'deploy' )
    mustRunAfter tasks.named( 'unpackDistro' )
}

tasks.register( 'deployApp', DefaultTask ) {
    description = 'Deploy Content Studio'
    group = 'Test Setup'

    def appFile = xpHome.dir( 'deploy' ).file("contentstudio-${version}.jar").asFile

    outputs.files( appFile )
    outputs.upToDateWhen { false }
    doLast {
        def appUrl = (findProperty('appUrl') ?: "file:///$rootDir/modules/app/build/libs/contentstudio.jar" ) as String

        println "Deleting ${appFile}. Exists ${appFile.exists()}"
        appFile.delete()

        println "Copying from ${appUrl} to ${appFile}"
        uri( appUrl ).toURL().withInputStream { i -> appFile.withOutputStream { it << i } }
    }
    mustRunAfter tasks.named( 'unpackDistro' )
}

// Server management tasks
def process
tasks.register( 'startServer' ) {
    description = 'Starts the XP server for testing'
    group = 'Test Setup'

    dependsOn tasks.named( 'unpackDistro' )
    doLast {
        logger.lifecycle( 'Starting XP Server at: {}', xpHome )
        logger.lifecycle( 'Server logs will be written to: build/reports/logs/xp.log' )
        def pb
        if ( DefaultNativePlatform.getCurrentOperatingSystem().windows ) {
            pb = new ProcessBuilder( 'cmd', '/c', "${distroDir}\\bin\\server.bat" )
        }
        else {
            pb = new ProcessBuilder( "${distroDir}/bin/server.sh" )
        }
        Map<String, String> env = pb.environment()
        env.put( 'XP_HOME', "${xpHome}".toString() )

        def logsPath = layout.buildDirectory.dir( 'reports/logs' ).get()
        mkdir logsPath.asFile
        pb.redirectOutput( logsPath.file( 'xp.log' ).asFile )
        pb.redirectErrorStream( true )
        process = pb.start()
    }
}

tasks.register( 'waitForServer') {
    description = 'Waits for the XP server'
    group = 'Test Setup'

    doLast {
        long maxWaitMs = 60000
        long deadline = System.nanoTime() + maxWaitMs * 1_000_000L

        boolean ready = false
        while (!ready && System.nanoTime() < deadline) {
            logger.lifecycle("Waiting for server server...")

            try {
                HttpURLConnection conn = (HttpURLConnection) uri("http://localhost:2609/ready").toURL().openConnection()
                conn.setConnectTimeout(1000)
                conn.setReadTimeout(1000)
                conn.connect()
                int code = conn.getResponseCode()
                if (code == 200) {
                    ready = true
                    break
                }
            } catch (IOException ignored) {
                // Not up yet; retry
            }
            sleep(1000)

        }
        if (ready) {
            logger.lifecycle('Server is ready.')
        } else {
            throw new GradleException("Server not ready after ${maxWaitMs} ms.")
        }

        sleep(1000)
    }

    mustRunAfter tasks.named( 'startServer' )
}

tasks.register( 'stopServer' ) {
    description = 'Stops the XP server'
    group = 'Test Setup'

    doLast {
        if ( !project.hasProperty( 'process' ) ) {
            logger.warn( 'Server process not found - it might already be stopped' )
            return
        }

        def os = DefaultNativePlatform.currentOperatingSystem
        def pid = process.pid()

        if ( os.isWindows() ) {
            logger.lifecycle( "Stopping server process (PID: ${pid})..." )
            exec {
                commandLine 'taskkill', '/F', '/T', '/PID', pid.toString()
                ignoreExitValue = true // Don't fail if the process is already gone
            }
        } else { // For macOS, Linux, and other Unix-like systems
            logger.lifecycle( "Stopping server process (PID: ${pid})..." )
            exec {
                commandLine 'kill', '-9', pid.toString()
                ignoreExitValue = true // Don't fail if the process is already gone
            }
        }

        // Clean up the process property
        project.ext.process = null
    }
}

tasks.register('cleanup', Delete) {
    description = 'Clean up Allure reports'
    group = 'verification'

    delete layout.buildDirectory.dir('reports/allure')
}

tasks.register('generateReport', PnpmTask) {
    description = 'Generate Allure report'
    group = 'verification'

    args = ['run-script', 'allure-report']
    finalizedBy tasks.named('cleanup')
}

// Test tasks
tasks.register('w_testInputTypes', PnpmTask) {
    group = 'verification'
    description = 'Run input types tests'

    args = ['run-script', 'test_input_types:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testInputTypesLocal', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run input types tests locally'
    args = ['run-script', 'test_input_types:wdio_chrome']
}

tasks.register('w_testInputTypes_2', PnpmTask) {
    group = 'verification'
    description = 'Run input types 2 tests'
    args = ['run-script', 'test_input_types_2:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testInputTypes_2_Local', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run input types 2 tests locally'
    args = ['run-script', 'test_input_types_2:wdio_chrome']
}

tasks.register('w_testModalDialog', PnpmTask) {
    group = 'verification'
    description = 'Run modal dialog tests'

    args = ['run-script', 'test_modal_dialog:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testModalDialogLocal', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run modal dialog tests locally'
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
}

tasks.register('w_testWizardsGrid', PnpmTask) {
    group = 'verification'
    description = 'Run wizards grid tests'

    args = ['run-script', 'test_wizards_grid:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testWizardsGridLocal', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run wizards grid tests locally'
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
}

tasks.register('w_testPublishIssues', PnpmTask) {
    group = 'verification'
    description = 'Run publish issues tests'

    args = ['run-script', 'test_publish_issues:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testPublishIssuesLocal', PnpmTask) {
    group = 'verification'
    description = 'Run publish issues tests locally'

    args = ['run-script', 'test_publish_issues:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testProjects', PnpmTask) {
    group = 'verification'
    description = 'Run project tests'

    args = ['run-script', 'test_project:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_miscTests', PnpmTask) {
    group = 'verification'
    description = 'Run miscellaneous tests'

    args = ['run-script', 'test_misc:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testProjects_2', PnpmTask) {
    group = 'verification'
    description = 'Run project 2 tests'

    args = ['run-script', 'test_project_2:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('testProjects_multi', PnpmTask) {
    group = 'verification'
    description = 'Run multi-project tests'

    args = ['run-script', 'test_project_multi:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named('copyProjectMultiConfig')
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testProjectsLocal', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run project tests locally'
    args = ['run-script', 'test_project:wdio_chrome']
}

tasks.register('w_testPageEditor', PnpmTask) {
    group = 'verification'
    description = 'Run page editor tests'

    args = ['run-script', 'test_page_editor:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register('w_testPageEditorLocal', PnpmTask) {
    dependsOn tasks.named('pnpmInstall')

    group = 'verification'
    description = 'Run page editor tests locally'
    args = ['run-script', 'test_page_editor:wdio_chrome']
}

tasks.register('w_testExcludeDependencies', PnpmTask) {
    group = 'verification'
    description = 'Run exclude dependencies tests'

    args = ['run-script', 'test_exclude_dependencies:wdio_chrome']

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyCustomConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    dependsOn tasks.named( 'waitForServer' )
    finalizedBy tasks.named('generateReport')
    finalizedBy tasks.named('stopServer')
}

tasks.register( 'yolo' ) {
    dependsOn tasks.named( 'build' )
}
