import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
}

ext {
    unpackDir = "$buildDir/install"
    distroDir = "$unpackDir/enonic-xp-generic-$xpVersion"
    deployDir = "$distroDir/home/deploy"
    appDir = "$projectDir/test-applications"
    seleniumDir = "$projectDir/test-applications/selenium"
    xpHome = "$distroDir/home"
    configDir = "$xpHome/config"
    xpServer = new ServerInstance()
    contentStudioFile = "$deployDir/contentstudio-${version}.jar"
    contentStudioPlusFile = "$deployDir/contentstudio.plus-${version}.jar"
    contentStudioAppUrl = project.hasProperty('contentStudioAppUrl') ? contentStudioAppUrl : "file:///$projectDir/../modules/app/build/libs/contentstudio.jar"
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task copyConfig( type: Copy ) {
    println "$appDir${File.separator}common-config"
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

task copyCustomConfig( type: Copy ) {
    println "$appDir${File.separator}custom-config"
    from "$appDir${File.separator}custom-config"
    include '**.*.cfg'
    into file( configDir )
}

task copyApps( type: Copy ) {
    println '*********************************************************'
    println '* task started:copyApps  *'
    println '*********************************************************'
    println appDir
    println deployDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}

task deployContentStudio( type: DefaultTask ) {
    outputs.files( contentStudioFile )
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL( contentStudioAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
    mustRunAfter unpackDistro
}

task startServer( dependsOn: [unpackDistro, copyConfig, deployContentStudio] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
    mustRunAfter npmInstall
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}


/////////////////////////////Firefox geckodriver:
task testWizardsGridFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_wizards_grid:firefox']
    finalizedBy stopServer
}

task testPageEditorFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_page_editor:firefox']
    finalizedBy stopServer
}

task testWizardsGridFirefoxLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_wizards_grid:firefox']
}

task testPageEditorFirefoxLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_page_editor:firefox']
}

task testInputTypesFirefox_2( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_input_types_2:firefox']
    finalizedBy stopServer
}

task testInputTypesFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_input_types:firefox']
    finalizedBy stopServer
}

task testInputTypesFirefox_2_Local( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_input_types_2:firefox']
}

task testInputTypesFirefoxLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_input_types:firefox']
}

task testContentStudioProjectsFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_project:firefox']
    finalizedBy stopServer
}
task testPublishIssuesFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_publish_issues:firefox']
    finalizedBy stopServer
}

task testModalDialogFirefox( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_modal_dialog:firefox']
    finalizedBy stopServer
}

task testPublishIssuesFirefoxLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_publish_issues:firefox']
}

task testModalDialogFirefoxLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_modal_dialog:firefox']
}

///////////////// CHROME WDIO , startServer, copyApps
task w_testInputTypes( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_input_types:wdio_chrome']
    finalizedBy stopServer
}

task w_testInputTypesLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_input_types:wdio_chrome']
}

task w_testInputTypes_2( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_input_types_2:wdio_chrome']
    finalizedBy stopServer
}

task w_testInputTypes_2_Local( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_input_types_2:wdio_chrome']
}

task w_testModalDialog( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
    finalizedBy stopServer
}

task w_testModalDialogLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_modal_dialog:wdio_chrome']
}

task w_testWizardsGrid( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
    finalizedBy stopServer
}

task w_testWizardsGridLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_wizards_grid:wdio_chrome']
}

task w_testPublishIssues( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_publish_issues:wdio_chrome']
    finalizedBy stopServer
}
task w_testPublishIssuesLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_publish_issues:wdio_chrome']
}

task w_testProjects( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_project:wdio_chrome']
    finalizedBy stopServer
}

task w_testProjects_2( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_project_2:wdio_chrome']
    finalizedBy stopServer
}

task w_testProjectsLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_project:wdio_chrome']
}

task w_testPageEditor( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_page_editor:wdio_chrome']
    finalizedBy stopServer
}

task w_testPageEditorLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_page_editor:wdio_chrome']
}

task w_testHiddenDefProject( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps, copyCustomConfig] ) {
    args = ['run-script', 'test_hide_default_project:wdio_chrome']
    finalizedBy stopServer
}