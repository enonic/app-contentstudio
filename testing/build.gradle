import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
}

enonic {
    publishRepo = 'inhouse'
}

ext {
    unpackDir = "$buildDir/install"
    distroDir = "$unpackDir/enonic-xp-generic-$xpVersion"
    deployDir = "$distroDir/home/deploy"
    appDir = "$projectDir/test-applications"
    seleniumDir = "$projectDir/test-applications/selenium"
    mochaResultsDir = "$buildDir/mochawesome-report"
    xpHome = "$distroDir/home"
    configDir = "$xpHome/config"
    xpServer = new ServerInstance()
    contentStudioFile = "$deployDir/contentstudio-${version}.jar"
    contentStudioAppUrl = project.hasProperty('contentStudioAppUrl') ? contentStudioAppUrl : "file:///$projectDir/../modules/app/build/libs/contentstudio.jar"
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task copyConfig( type: Copy ) {
    println "$appDir${File.separator}common-config"
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

task copyApps( type: Copy ) {
    println '*********************************************************'
    println '* task started:copyApps  *'
    println '*********************************************************'
    println appDir
    println deployDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}


task deployContentStudio( type: DefaultTask ) {
    outputs.files( contentStudioFile )
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL( contentStudioAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
    mustRunAfter unpackDistro
}

def createAppendix( classifier ) {
    return hasProperty( 'artifactAppendix' ) ? "${artifactAppendix}-${classifier}" : classifier
}

task zipReport( type: Zip ) {
    from mochaResultsDir
    include '*'
    include '*/*'
    classifier createAppendix( 'mochaReport' )
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifact zipReport
        }
    }
}

task startServer( dependsOn: [unpackDistro, copyConfig, deployContentStudio] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
    mustRunAfter npmInstall
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

task buildApplications( dependsOn: ['test-applications:simple-page:install'] )

// run task in the task.js. Name of the task is 'test'
task testContentStudioApp( type: NpmTask,
                           dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['test']
    finalizedBy stopServer
}

task testContentStudioProjects( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_project']
    finalizedBy stopServer
}

task testPageEditor( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_page_editor']
    finalizedBy stopServer
}

task testInputTypes( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_input_types']
    finalizedBy stopServer
}

task testWizardsGrid( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_wizards_grid']
    finalizedBy stopServer
}

task testPublishIssues( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test_publish_issues']
    finalizedBy stopServer
}

task baseContentStudioTests( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'base_tests']
    finalizedBy stopServer
}

task runSeparateTestLocally( type: Exec, dependsOn: [npmInstall] ) {
    if ( project.hasProperty( "t_name" ) )
    {
        println( "N_A_M_E: " + t_name );
        environment = ['t_name': t_name]
        commandLine 'node', './tasks/test-by-name.js'
    }
}

task testContentStudioAppLocally( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['test']
}
