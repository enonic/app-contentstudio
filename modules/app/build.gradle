apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.enonic.defaults'
apply plugin: 'com.enonic.xp.app'

archivesBaseName = 'contentstudio'

app {
    name = 'com.enonic.app.contentstudio'
    group = 'com.enonic.app'
    displayName = 'Content Studio'
    systemVersion = "${xpVersion}"
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
    devSourcePaths += file( "../lib/src/main/resources" )
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"

    include "org.apache.commons:commons-text:${commonsTextVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-mustache:${libMustacheVersion}"
    include project( ':lib-contentstudio' )
    include project( ':rest' )
}

node {
    version = '15.8.0'
    download = true
}

if ( hasLibAdminUi() )
{
    build.dependsOn += libAdminBuildTask
    clean.dependsOn += libAdminCleanTask
}

npmInstall.mustRunAfter unpackDevResources
processResources.dependsOn += unpackDevResources

project.afterEvaluate {
    jar {
        bnd ('Private-Package': '!dev.*, *;-split-package:=merge-first')
    }
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: 'src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir ".xp/dev"
    inputs.dir "./src/main"
    inputs.file 'webpack.config.js'
    outputs.dir "$buildDir/resources/main"
}

jar {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'
    exclude 'assets/styles/*.js'
    exclude 'assets/page-editor/styles/*.js'
    exclude 'assets/page-editor/lib/_include.js'
    exclude 'assets/page-editor/lib/jquery*.js'
    exclude 'assets/icons/fonts/*.*'
    exclude 'assets/lib/ckeditor/**/plugin.raw.js'
    if (isProd()) {
        exclude 'assets/**/*.map'
    }

    outputs.dir "$buildDir/resources/main"

    dependsOn += webpack
}

