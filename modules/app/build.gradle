apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.enonic.defaults'
apply plugin: 'com.enonic.xp.app'

base {
    archivesName = 'contentstudio'
}

app {
    name = 'com.enonic.app.contentstudio'
    group = 'com.enonic.app'
    displayName = 'Content Studio'
    systemVersion = "${xpVersion}"
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
    devSourcePaths += file( "../lib/src/main/resources" )
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:admin-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    implementation "com.enonic.xp:jaxrs-api:${xpVersion}"

    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-app:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-grid:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-project:${xpVersion}"
    include "com.enonic.xp:lib-schema:${xpVersion}"
    include "com.enonic.xp:lib-websocket:${xpVersion}"
    include libs.commons.text
    include libs.lib.mustache
    include libs.lib.http.client
    include libs.lib.text.encoding

    include project( ':lib-contentstudio' )
    include project( ':rest' )
    devResources project( path: ':lib-contentstudio', configuration: 'devResources' )
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
}

// Use task configuration avoidance
tasks.named( 'copyDevResources' ).configure {
    dependsOn project(':lib-contentstudio').tasks.named('devJar')
}

tasks.named( 'pnpmInstall' ).configure {
    mustRunAfter project(':lib-contentstudio').tasks.named('pnpmInstall')
}

tasks.register( 'checkTypes', PnpmTask ) {
    dependsOn tasks.named('pnpmInstall')
    group 'verification'
    args = ['run', 'check:types']
    outputs.cacheIf { false }
}

tasks.register( 'checkLint', PnpmTask ) {
    dependsOn tasks.named('pnpmInstall')
    group 'verification'
    args = ['run', 'check:lint']
    outputs.cacheIf { false }
}

tasks.register( 'pnpmCheck', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    args = ['run', 'check']
    outputs.cacheIf { false }
}

tasks.named( 'check' ).configure {
    dependsOn tasks.named( 'pnpmCheck' )
}

tasks.register( 'pnpmBuild', PnpmTask ) {
    dependsOn tasks.named('pnpmInstall')
    dependsOn tasks.named('copyDevResources')
    environment = ['NODE_ENV': nodeEnvironment()]
    description = 'Build UI resources (ts, css, etc).'
    args = ['run', 'build']
    inputs.dir '.xp/dev'
    inputs.dir 'src/main/resources/assets'
    inputs.file 'webpack.config.js'
    inputs.file 'webpack.worker.config.js'
    outputs.dir "$buildDir/build/resources/main/assets"
}

tasks.named('jar').configure {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'
    exclude 'assets/styles/*.js'
    exclude 'assets/page-editor/styles/*.js'
    exclude 'assets/page-editor/lib/_include.js'
    exclude 'assets/page-editor/lib/jquery*.js'
    exclude 'assets/icons/*.txt'
    exclude 'assets/styles/widgets/*.js'
    exclude 'lib/**/*.ts'

    if ( isProd() )
    {
        exclude 'assets/**/*.map'
    }

    dependsOn(tasks.named('test'))
    dependsOn(tasks.named('pnpmBuild'))
}

tasks.register( 'yolo' ) {
    description = 'Build without running install, check, or test tasks'

    dependsOn tasks.named( 'deploy' )
    dependsOn tasks.named( 'checkTypes' )
    dependsOn project(':lib-contentstudio').tasks.named('yolo')

    nodeSetup.enabled = false
    npmSetup.enabled = false
    pnpmSetup.enabled = false
    pnpmCheck.enabled = false
    checkLint.enabled = false
    check.enabled = false
    test.enabled = false
    compileTestJava.enabled = false
}
