apply plugin: 'maven-publish'

group='com.enonic.lib'
archivesBaseName = 'lib-contentstudio'

configurations {
    devResources {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'dev-resources'))
        }
    }
}

dependencies {
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
}

task copyDevResources {
    doLast {
        copy {
            from configurations.devResources.files.collect { zipTree( it ) }
            include 'dev/**'
            into '.xp'
        }
    }
}

npmInstall.dependsOn copyDevResources

node {
    download = true
    version = '16.0.0'
}

def resourcesDir = file( 'src/main/resources' )

task lint( type: NpmTask, group: "verification", dependsOn: npmInstall ) {
    args = [ 'run', 'lint:quiet' ]
    inputs.files fileTree( dir: 'src', include: '**/*.ts' )
}

check.dependsOn( lint )

task typescriptLib( type: NpmTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build library, that should be included to HTML.'
    args = [ 'run', 'build:lib' ]
    inputs.dir "$resourcesDir/assets"
    outputs.dir "$buildDir/resources/main/assets"
}

task typescriptPkg( type: NpmTask, dependsOn: npmInstall ) {
    def buildEnv = getEnvironmentShort()
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ 'run', "build:$buildEnv" ]
    inputs.dir "$projectDir/src/main/resources/assets/"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
}

task minifyPkg( type: NpmTask, dependsOn: typescriptPkg ) {
    description = 'Minify transpiled code.'
    args = [ 'run', "build:minify" ]
    inputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    enabled isProd()
}

task copyPackage( type: NodeTask, dependsOn: typescriptPkg ) {
    script = file( 'util/modify.js' )
    args = [ "--out=$buildDir/resources/main/dev/$archivesBaseName" ]
}

task typescript {
    dependsOn 'typescriptPkg'
    dependsOn 'typescriptLib'
    dependsOn 'minifyPkg'
    dependsOn 'copyPackage'
}

jar {
    exclude 'admin/**'
    exclude 'assets/js/**'
    exclude 'assets/icons/**'
    exclude 'assets/styles/**/*.less'
    exclude 'com/**'
    exclude 'i18n/**/common*'
    exclude 'lib/**'
    exclude 'services/**'
    exclude 'application.svg'
    exclude 'application.xml'
    exclude 'dev/**'

    includeEmptyDirs = false
    dependsOn typescript
}

task devJar ( type: Jar ) {
    archiveClassifier = 'dev-resources'
    from sourceSets.main.output
    include 'dev/**'
    includeEmptyDirs = false
    dependsOn typescript
}

jar.dependsOn devJar

artifacts {
    devResources devJar
}

components.java.addVariantsFromConfiguration( configurations.devResources )  {
}
