apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.enonic.defaults'
apply plugin: 'com.enonic.xp.app'

archivesBaseName = 'lib-contentstudio'

app {
    name = 'com.enonic.lib.contentstudio'
    group = 'com.enonic.lib'
    displayName = 'Content Studio Library'
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
}

dependencies {
    compile "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
}

compileJava.enabled = false
compileTestJava.enabled = false
classes.enabled = false
unpackWebJars.enabled = false
deploy.enabled = false

node {
    download = true
    version = '15.8.0'
}

if ( hasLibAdminUi() )
{
    build.dependsOn += libAdminBuildTask
    clean.dependsOn += libAdminCleanTask
}

npmInstall.mustRunAfter unpackDevResources
processResources.dependsOn += unpackDevResources

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: 'src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task typescriptPkg( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    def buildEnv = getEnvironmentShort()
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ 'run', "build:$buildEnv" ]
    inputs.dir "$projectDir/src/main/resources/assets/"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
//    outputs.upToDateWhen { false }
}

task minifyPkg( type: NpmTask, dependsOn: [npmInstall, typescriptPkg] ) {
    description = 'Minify transpiled code.'
    args = [ 'run', "build:minify" ]
    inputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    mustRunAfter typescriptPkg
    enabled isProd()
}

task copyPackage( type: NodeTask, dependsOn: typescriptPkg ) {
    script = file( 'util/modify.js' )
    args = [ "--out=$buildDir/resources/main/dev/$archivesBaseName" ]
    mustRunAfter typescriptPkg
}

task typescript {
    dependsOn 'typescriptPkg'
    dependsOn 'minifyPkg'
    dependsOn 'copyPackage'
}

jar {
    exclude 'admin/**'
    exclude 'assets/**'
    exclude 'com/**'
    exclude 'i18n/**/common*'
    exclude 'lib/**'
    exclude 'services/**'
    exclude 'application.svg'
    exclude 'application.xml'

    includeEmptyDirs = false
    dependsOn += typescript
}
