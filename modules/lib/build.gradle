apply plugin: 'maven-publish'

group = 'com.enonic.lib'

base {
    archivesName = 'lib-contentstudio'
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

dependencies {
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
}

tasks.register( 'checkTypes', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group 'verification'
    args = ['run', 'check:types']
    outputs.cacheIf { false }
}

tasks.register( 'checkLint', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group 'verification'
    args = ['run', 'check:lint']
    outputs.cacheIf { false }
}

tasks.register( 'pnpmCheck', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    args = ['run', 'check']
    outputs.cacheIf { false }
}

tasks.named( 'check' ).configure {
    dependsOn tasks.named( 'pnpmCheck' )
}

tasks.register( 'pnpmBuild', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    description = 'Build JS and DTS'
    def buildEnv = isProd() ? 'prod' : 'dev'
    environment = ['NODE_ENV': nodeEnvironment()]
    args = ['run', "build:$buildEnv"]
    inputs.dir "$projectDir/src/main/resources/assets/"
    outputs.dirs( "$buildDir/resources/main/assets/",
                  "$buildDir/resources/main/dev/${base.archivesName.get()}" )
}

tasks.register( 'copyPackage', NodeTask ) {
    dependsOn tasks.named( 'pnpmBuild' )
    script = file( 'util/modify.js' )
    args = ["--out=$buildDir/resources/main/dev/${base.archivesName.get()}"]
    inputs.file "./package.json"
    outputs.file "$buildDir/resources/main/dev/${base.archivesName.get()}/package.json"
}

tasks.register( 'devJar', Jar ) {
    archiveClassifier = 'dev-resources'
    from sourceSets.main.output
    include 'dev/**'
    includeEmptyDirs = false
    dependsOn tasks.named( 'pnpmBuild' )
    dependsOn tasks.named( 'copyPackage' )
}

tasks.named( 'jar' ).configure {
    exclude 'admin/**'
    exclude 'assets/js/**'
    exclude 'assets/lib/ckeditor/**/*.md'
    exclude 'assets/lib/ckepath.js'
    exclude 'assets/lib/ckeditor/build-config.js'
    exclude 'assets/lib/ckeditor/ckeditor.js'
    exclude 'assets/icons/**'
    exclude 'assets/styles/**/*.less'
    exclude 'com/**'
    exclude 'i18n/**/common*'
    exclude 'lib/**'
    exclude 'services/**'
    exclude 'application.svg'
    exclude 'application.xml'
    exclude 'dev/**'

    includeEmptyDirs = false

    dependsOn tasks.named( 'devJar' )
}

artifacts {
    devResources devJar
}

components.java.addVariantsFromConfiguration( configurations.devResources ) {}

tasks.register( 'yolo' ) {
    description = 'Build without running install, check, or test tasks'

    dependsOn tasks.named( 'build' )
    dependsOn tasks.named( 'checkTypes' )

    nodeSetup.enabled = false
    npmSetup.enabled = false
    pnpmSetup.enabled = false
    pnpmCheck.enabled = false
    check.enabled = false
    test.enabled = false
}
