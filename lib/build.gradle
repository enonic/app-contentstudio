archivesBaseName = 'lib-contentstudio'

app {
    name = 'com.enonic.lib.contentstudio'
    group = 'com.enonic.lib'
    displayName = 'Content Studio Library'
}

task lint {
    dependsOn tasks.getByPath(':lint')
}

task typescriptPkg( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    def buildEnv = getEnvironmentShort()
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ 'run', "build:$buildEnv" ]
    inputs.dir "$rootDir/src/main/resources/assets"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
}

task minifyPkg( type: NpmTask, dependsOn: [npmInstall, typescriptPkg] ) {
    description = 'Minify transpiled code.'
    args = [ 'run', "build:minify" ]
    inputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    outputs.dir "$buildDir/resources/main/dev/$archivesBaseName"
    mustRunAfter typescriptPkg
    enabled isProd()
}

task copyPackage( type: Copy ) {
    from( './' ) {
        include 'package.json'
    }
    into "$buildDir/resources/main/dev/$archivesBaseName"
    includeEmptyDirs = false
}

task typescript {
    dependsOn 'typescriptPkg'
    dependsOn 'minifyPkg'
    dependsOn 'copyPackage'
}

jar {
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'
    exclude 'assets/**/styles/*.js'

    // COMMON/LIB excludes
    // Exclude complex files, that only present after the first build and must be evaluated dynamically
    def whitelist = [
        /.*lib\.js$/,
        /.*\.css$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude {
        FileTreeElement el -> !el.directory && el.relativePath.contains('common/lib') && (!whitelist.any { re -> el.relativePath.toString().matches( re ) })
    }

    includeEmptyDirs = false
    dependsOn += typescript
}
