plugins {
    id 'com.enonic.defaults' version '2.0.1' apply false
    id 'com.enonic.xp.app' version '2.0.0' apply false
    id 'com.github.node-gradle.node' version '2.2.3' apply false
    id 'org.asciidoctor.convert' version '1.5.7' apply false
    id 'org.aim42.htmlSanityCheck' version '1.0.0-RC-1' apply false
}

allprojects {
    apply plugin: 'com.github.node-gradle.node'
    apply plugin: 'com.enonic.xp.app'
    apply from: "$rootDir/gradle/env.gradle"
    apply from: "$rootDir/gradle/lib-admin.gradle"
    apply from: "$rootDir/gradle/node.gradle"

    dependencies {
        compile("com.enonic.xp:core-api:${xpVersion}") {
            force = true
        }
        compile ("com.enonic.xp:portal-api:${xpVersion}") {
            force = true
        }
        include "com.enonic.xp:lib-admin:${xpVersion}"
        include "com.enonic.xp:lib-portal:${xpVersion}"
        include "com.enonic.xp:lib-context:${xpVersion}"
        include "com.enonic.xp:lib-content:${xpVersion}"
        include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
        include "com.enonic.lib:lib-mustache:${libMustacheVersion}"
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.23.0'
    }

    app {
        systemVersion = "${xpVersion}"
        vendorName = 'Enonic AS'
        vendorUrl = 'https://enonic.com'
    }

    node {
        download = true
        version = '14.15.0'
    }

    repositories {
        mavenLocal()
        jcenter()
        xp.enonicRepo('dev')
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.enonic.defaults'
    apply plugin: 'com.enonic.xp.app'

    sourceSets {
        main {
            java {
                srcDirs "$rootDir/src/main/java"
            }
            resources {
                srcDirs "$rootDir/src/main/resources"
            }
        }
        test {
            java {
                srcDirs "$rootDir/src/test/java"
            }
            resources {
                srcDirs "$rootDir/src/test/resources"
            }
        }
    }

    app {
        devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
    }

    project.afterEvaluate {
        jar {
            bnd ('Private-Package': '!dev.*, *;-split-package:=merge-first')
        }
    }

    unpackDevResources.enabled = false

    def unpackDevResourcesRoot = rootProject.tasks.getByPath(':unpackDevResources')
    npmInstall.mustRunAfter unpackDevResourcesRoot
    processResources.dependsOn += unpackDevResourcesRoot

    if ( hasLibAdminUi() )
    {
        build.dependsOn += libAdminBuildTask
        clean.dependsOn += libAdminCleanTask
    }

    def webpackTask = tasks.findByPath( ':webpack' )
    if ( webpackTask != null ) webpackTask.dependsOn += unpackDevResourcesRoot
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: 'src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

if ( hasLibAdminUi() )
{
    flush.dependsOn += libAdminFlushTask
    unpackDevResources.dependsOn += libAdminBuildTask
}
