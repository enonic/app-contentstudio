plugins {
    alias(libs.plugins.enonic.defaults) apply false
    alias(libs.plugins.enonic.xp.app) apply false
    alias(libs.plugins.enonic.xp.base) apply false
    alias(libs.plugins.node.gradle) apply false
    alias(libs.plugins.asciidoctor.jvm)
    alias(libs.plugins.htmlSanityCheck)
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.enonic.defaults'
    apply plugin: 'com.enonic.xp.base'
    apply from: "$rootDir/gradle/env.gradle"
    apply from: "$rootDir/gradle/node.gradle"
    apply from: "$rootDir/gradle/lib-admin.gradle"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = sourceCompatibility

    dependencies {
        testImplementation platform(libs.junit.bom)
        testImplementation libs.junit.jupiter
        testRuntimeOnly  libs.junit.launcher

        testImplementation libs.mockito.core
        testImplementation libs.mockito.jupiter
        testImplementation libs.assertj.core
    }

    repositories {
        mavenLocal()
        xp.enonicRepo('dev')
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }
}

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    attributes 'source-highlighter': 'coderay',
               idseparator: '-'

    resources {
        from(sourceDir) {
            include '**/images/**'
            include '**/code/**'
            include '**/*.*'
        }
    }
}

htmlSanityCheck {
    dependsOn asciidoctor
    sourceDir = tasks.asciidoctor.outputDir

    sourceDocuments = fileTree(sourceDir) {
        include "index.html"
    }

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/report/htmlchecks" )
    //checkExternalLinks = false

    // fail build on errors?
    failOnErrors = true
}

build.enabled = false
