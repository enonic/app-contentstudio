---
description: Tailwind CSS and styling utilities standards
globs: *.tsx
alwaysApply: false
---

# Tailwind CSS & Styling Standards

## Class Name Utilities

### `cn` (clsx/twMerge wrapper) - Default Choice

```typescript
// ✅ Use cn for most dynamic class combinations
const buttonClasses = cn(
  'px-4 py-2 rounded font-medium',
  disabled && 'opacity-50 cursor-not-allowed',
  variant === 'primary' && 'bg-blue-500 text-white',
  className,
);

// ✅ Use cn for simple conditional classes
<div className={cn('flex gap-2', isVertical && 'flex-col')} />

// ❌ Don't use cva for single conditions
// ❌ Don't use template literals for Tailwind classes
```

### `cva` - Only for Complex Variants

```typescript
// ✅ Use cva ONLY when you have 2+ variant dimensions with multiple options
const buttonVariants = cva('px-4 py-2 rounded font-medium transition-colors', {
  variants: {
    variant: {
      primary: 'bg-blue-500 text-white hover:bg-blue-600',
      secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
      ghost: 'bg-transparent hover:bg-gray-100',
      danger: 'bg-red-500 text-white hover:bg-red-600',
    },
    size: {
      sm: 'text-sm px-3 py-1',
      md: 'text-base px-4 py-2',
      lg: 'text-lg px-6 py-3',
    },
    // ✅ Compound variants for specific combinations
    compoundVariants: [
      {
        variant: 'ghost',
        size: 'sm',
        class: 'hover:bg-gray-50',
      },
    ],
  },
  defaultVariants: {
    variant: 'primary',
    size: 'md',
  },
});

// ❌ DON'T use cva for simple true/false states
const badVariants = cva('base', {
  variants: {
    disabled: {
      true: 'opacity-50',
      false: '',
    },
  },
});
```

## Tailwind 4 Best Practices

### Color System

```typescript
// ✅ Use semantic color tokens when available
<div className="bg-primary text-primary-foreground" />

// ✅ Use Tailwind class names directly for theme colors
<div className="bg-overlay backdrop-blur-xs" />

// ❌ Avoid arbitrary CSS variable syntax
<div className="bg-[var(--color-overlay)]" /> // Use bg-overlay instead

// ✅ Use color-* syntax for dynamic colors in v4
<div className="bg-color-blue-500/90" />

// ❌ Avoid arbitrary values when design tokens exist
<div className="bg-[#3B82F6]" /> // Use bg-blue-500 instead
```

### Spacing & Layout

```typescript
// ✅ Use logical properties
<div className="ps-4 me-2" /> // padding-start, margin-end

// ✅ Consistent gap usage in flex/grid
<div className="flex gap-4" /> // Not space-x-4

// ✅ Use container queries where appropriate
<div className="@container">
  <div className="@lg:grid-cols-3" />
</div>
```

### Responsive Design

```typescript
// ✅ Mobile-first approach
<div className="text-sm md:text-base lg:text-lg" />

// ✅ Use Tailwind 4's new responsive syntax when stable
<div className="text-sm text-base@md text-lg@lg" />

// ❌ Don't mix breakpoint orders
<div className="lg:text-lg text-sm md:text-base" /> // Confusing order
```

### Performance Patterns

```typescript
// ✅ Group related utilities
<div className="border border-gray-200 rounded-lg shadow-sm" />

// ✅ Extract repeated class combinations into cn() calls
const cardBase = 'rounded-lg border bg-card p-6 shadow-sm';

// ❌ Don't use @apply in component files - use cn() or cva()
// @apply should only be in CSS files for base styles
```

### Animation & Transitions

```typescript
// ✅ Use Tailwind's built-in animations
<div className="animate-pulse" />

// ✅ Combine with transition utilities
<button className="transition-colors duration-200 hover:bg-blue-600" />

// ✅ Use animation-* utilities from v4
<div className="animation-slide-in animation-duration-300" />
```

## Class Name Management

### When to Extract Classes to Variables

**Extract to variables when:**

```typescript
// ✅ Complex conditional logic
const buttonClasses = cn(
  'px-4 py-2 rounded font-medium transition-colors',
  variant === 'primary' && 'bg-blue-500 text-white hover:bg-blue-600',
  variant === 'secondary' && 'bg-gray-200 text-gray-900 hover:bg-gray-300',
  size === 'sm' && 'text-sm px-3 py-1',
  disabled && 'opacity-50 cursor-not-allowed pointer-events-none',
  className,
);

// ✅ More than 6 classes on a single line, 4+ lines, or 80+ characters
const containerClasses = cn(
  'relative flex items-center justify-between', // Line 1
  'gap-4 rounded-lg border border-gray-200', // Line 2
  'bg-white p-6 shadow-sm', // Line 3
  'hover:shadow-md transition-shadow', // Line 4
  isActive && 'ring-2 ring-blue-500', // Line 5 - Extract!
);

// ✅ Reused in multiple places (2+ uses) in the same file
const cardStyles = 'rounded-lg border bg-card p-6 shadow-sm';
// Used in multiple elements within the component
```

**Keep inline when:**

```typescript
// ✅ Simple static classes (up to 5)
<div className="flex items-center gap-2" />

// ✅ Single simple condition
<button className={cn('px-4 py-2', disabled && 'opacity-50')} />

// ✅ Obvious connection between classes and element
<h1 className="text-2xl font-bold">Title</h1>
```

### Organization Patterns

**Group related styles:**

```typescript
// ✅ Logically related styles grouped together
const classNames = cn(
  'relative min-h-screen bg-background',
  'mx-auto max-w-7xl px-4 py-8',
  'grid gap-6 md:grid-cols-2 lg:grid-cols-3',
);

return (
  <div className={classNames}>
    {/* ... */}
  </div>
);
```

**Compose base styles:**

```typescript
// ✅ Base styles + modifications
const baseButton = 'px-4 py-2 rounded font-medium transition-colors';
const primaryButton = cn(baseButton, 'bg-blue-500 text-white hover:bg-blue-600');
const secondaryButton = cn(baseButton, 'bg-gray-200 hover:bg-gray-300');
```

**Decision framework:**

- Keep classes close to usage but after all logic
- Extract when readability suffers in JSX
- Extract when you start duplicating combinations
- Follow the flow: hooks → logic → styles → render

## Component Styling Patterns

### Base Component Structure

```typescript
export function Component({ className, ...props }: ComponentProps) {
  // ✅ Always allow className override as last argument
  return (
    <div
      className={cn(
        // Base styles first
        'relative flex items-center gap-2',
        // Conditional styles
        props.disabled && 'pointer-events-none select-none opacity-30',
        // User overrides last
        className,
      )}
      {...props}
    />
  );
}
```

### State Management with Data Attributes

```typescript
// ✅ Use data-* attributes for state-based styling
<li
  data-active={isActive}
  data-selected={isSelected}
  className="option data-[active=true]:bg-surface-primary-hover data-[selected=true]:bg-surface-primary"
>
  Option
</li>

// ❌ Avoid complex class-based state selectors
<li
  className={cn(
    'option',
    isActive && 'option-active',
    isSelected && 'option-selected'
  )}
>
  {/* Then using: 'focus-within:[&>li.option-active:not(.option-selected)]:bg-surface-primary-hover' */}
  Option
</li>

// Why data-* attributes are better:
// - More declarative and readable
// - Better separation of state and styling
// - Easier to debug in DevTools
// - Less specificity issues
// - Simpler selector syntax
```

### Dark Mode

```typescript
// ✅ CSS variables are used for theming, dark mode is handled by the theme provider
<div className="bg-background text-foreground" />
```

## Anti-patterns to Avoid

```typescript
// ❌ String concatenation for classes
<div className={'text-' + size} /> // Breaks Tailwind's compiler

// ❌ Conditional full class names in templates
<div className={`${active ? 'bg-blue-500 text-white' : 'bg-gray-200 text-black'}`} />
// ✅ Use cn() instead

// ❌ Mixing Tailwind with inline styles
<div className="p-4" style={{ margin: '10px' }} />

// ❌ Over-nesting conditional classes
active && disabled && hover && 'some-class' // Hard to read

// ❌ Using important modifier everywhere
<div className="!p-4 !m-2 !text-center" /> // Fix specificity properly
```
