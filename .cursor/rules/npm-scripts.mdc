---
description:
globs:
alwaysApply: true
---

# Using pnpm Scripts

`modules/app` and `modules/lib` are the main modules of the project and contain their own package.json files with their own scripts.

## Dependency Management

- Always use `pnpm` instead of `npm` if possible:

```bash
# Manage dependencies
pnpm install
pnpm add <pkg>
pnpm add -D <pkg>
pnpm remove <pkg>

# List packages with newer versions available
pnpm update

# List packages with newer versions available
pnpm outdated

# List packages with newer versions available
pnpm dedupe

# Prefer over `npx` to run one-off commands without installing globally
pnpm dlx <cli>
```

- Pin critical dev tools (eslint, prettier, jest) to exact versions in `devDependencies` to avoid unexpected CI failures.

## Project Scripts

Use these commands to keep your code healthy, consistent, and secure:

### Building

- **`pnpm build`**
  Build the library for production (cleans + compiles + bundles).

### Code Quality

- **`pnpm check`**
  Run complete code quality check: typecheck + lint + format:check.

- **`pnpm check:types`**
  Validate TypeScript types without emitting files.

- **`pnpm check:lint`**
  Run ESLint to catch code-style issues and potential bugs.

- **`pnpm format`**
  To Be Implemented: Run Prettier to normalize code style; always after code changes.
