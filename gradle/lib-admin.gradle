def isLibAdminUiIncluded()
{
    return new File( "$rootDir/../lib-admin-ui" ).exists()
}

def hasLibAdminUi()
{
    return hasEnvironment() && isLibAdminUiIncluded()
}

def hasTask( name )
{
    return project.tasks.findByName( name ) != null
}

def applyResourcesTaskDependencies()
{
    def libAdminDevJarTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':devJar' )
    def libAdminBuildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )

    if ( hasTask( 'copyDevResources' ) ) {
        copyDevResources.dependsOn libAdminDevJarTask
    }

    build.dependsOn += libAdminBuildTask
}

if ( hasLibAdminUi() )
{
    afterEvaluate {
        applyResourcesTaskDependencies()
    }
}

ext {
    hasLibAdminUi = this.&hasLibAdminUi
}

afterEvaluate {
    if ( hasTask( 'clean' ) )
    {
        task flush( type: Delete ) {
            description = 'Clean the project from built sources and dependencies'
            delete '.xp'
        }
        clean.dependsOn flush
    }
}
