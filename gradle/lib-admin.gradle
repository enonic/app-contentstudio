def isLibAdminUiIncluded()
{
    return new File( "$rootDir/../lib-admin-ui" ).exists()
}

def hasLibAdminUi()
{
    return hasEnvironment() && isLibAdminUiIncluded()
}

if ( hasLibAdminUi() )
{
    def libAdminUi = gradle.includedBuild( 'lib-admin-ui' )
    def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll( { it == 'lint' || it == 'test' } )
    libAdminUi.getLoadedSettings().getStartParameter().setExcludedTaskNames( excludedTasks )

    ext {
        libAdminBuildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )
        libAdminCleanTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':clean' )
        libAdminFlushTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':flush' )
    }
}

ext {
    hasLibAdminUi = this.&hasLibAdminUi
}

task flush( type: Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}
