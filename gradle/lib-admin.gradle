def isLibAdminUiIncluded()
{
    return new File( "$rootDir/../lib-admin-ui" ).exists()
}

def hasLibAdminUi()
{
    return hasEnvironment() && isLibAdminUiIncluded()
}

def hasTask( name )
{
    return project.tasks.findByName( name ) != null
}

def applyExcludedTasks()
{
    def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll( { it == 'lint' || it == 'test' } )

    gradle.includedBuild( 'lib-admin-ui' ).getLoadedSettings().getStartParameter().setExcludedTaskNames( excludedTasks )
}

def applyBuildTaskDependencies()
{
    def libAdminBuildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )

    if ( hasTask( 'copyDevResources' ) ) {
        copyDevResources.dependsOn libAdminBuildTask
    }
    if ( hasTask( 'typescript' ) ) {
        typescript.dependsOn libAdminBuildTask
        typescript.mustRunAfter(libAdminBuildTask)

    }
    if ( hasTask( 'webpack' ) ) {
        webpack.dependsOn libAdminBuildTask
        webpack.mustRunAfter(libAdminBuildTask)
    }
}

if ( hasLibAdminUi() )
{
    afterEvaluate {
        applyExcludedTasks()
        applyBuildTaskDependencies()
    }
}

ext {
    hasLibAdminUi = this.&hasLibAdminUi
}

afterEvaluate {
    if ( hasTask( 'clean' ) )
    {
        task flush( type: Delete, dependsOn: clean ) {
            description = 'Clean the project from built sources and dependencies'
            delete '.xp'
        }
    }
}
